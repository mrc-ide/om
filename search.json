[{"path":"/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Pete Winskill. Author, maintainer.","code":""},{"path":"/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Winskill P (2022). om: Optimiation Malaria Budgets. R package version 0.1.0.","code":"@Manual{,   title = {om: Optimiation of Malaria Budgets},   author = {Pete Winskill},   year = {2022},   note = {R package version 0.1.0}, }"},{"path":"/index.html","id":"om-","dir":"","previous_headings":"","what":"Optimiation of Malaria Budgets","title":"Optimiation of Malaria Budgets","text":"om can used find solutions budget-optimisation challenges. might finding optimal mix spatially-targeted intervention packages across country affordable within specified budget envelope. om can also deal optimisations multiple budgets may available different subsets spatial units. example, may want maximise impact global-donor budget optimised across multiple countries, combined contributions domestic budgets country. clever-stuff background handled superb ompr package. Please give appropriate attribution cite ompr package using om (citation(\"ompr\")) sure check ! get started, take look introductory vignette Updates, reviews improvements encouraged via PRs! issues clarifications? Please post issues page .","code":""},{"path":"/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Optimiation of Malaria Budgets","text":"can install development version om like :","code":"remotes::install_github(\"mrc-ide/om\")"},{"path":"/reference/allocation_output.html","id":null,"dir":"Reference","previous_headings":"","what":"Wrangle allocations — allocation_output","title":"Wrangle allocations — allocation_output","text":"Wrangle allocations","code":""},{"path":"/reference/allocation_output.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Wrangle allocations — allocation_output","text":"","code":"allocation_output(solution, budget)"},{"path":"/reference/allocation_output.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Wrangle allocations — allocation_output","text":"solution Model solution budget vector budgets","code":""},{"path":"/reference/allocation_output.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Wrangle allocations — allocation_output","text":"Allocation proportions","code":""},{"path":"/reference/brute.html","id":null,"dir":"Reference","previous_headings":"","what":"Brute force search for single budget level — brute","title":"Brute force search for single budget level — brute","text":"Brute force search single budget level","code":""},{"path":"/reference/brute.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Brute force search for single budget level — brute","text":"","code":"brute(z, cost, budget)"},{"path":"/reference/brute.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Brute force search for single budget level — brute","text":"z Matrix impact. Rows[] = units, cols[j] = options, fill = impact measure. units options, fill z NA. cost Matrix cost. Rows[] = units, cols[j] = options, fill = cost. units options, fill cost NA. budget vector budgets","code":""},{"path":"/reference/brute.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Brute force search for single budget level — brute","text":"Brute force solution","code":""},{"path":"/reference/create_model.html","id":null,"dir":"Reference","previous_headings":"","what":"Create ompr model — create_model","title":"Create ompr model — create_model","text":"Create ompr model","code":""},{"path":"/reference/create_model.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create ompr model — create_model","text":"","code":"create_model(n, options, z, cost, budget, budget_n, not_recipients, sense)"},{"path":"/reference/create_model.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create ompr model — create_model","text":"n Number units options Maximum number options per unit z Matrix impact. Rows[] = units, cols[j] = options, fill = impact measure. units options, fill z NA. cost Matrix cost. Rows[] = units, cols[j] = options, fill = cost. units options, fill cost NA. budget vector budgets budget_n Number budget levels not_recipients Binary matrix indicating units allowed access given budget level sense Optimisation target, can \"min\" \"max\"","code":""},{"path":"/reference/create_model.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create ompr model — create_model","text":"ompr model","code":""},{"path":"/reference/matrix_to_idf.html","id":null,"dir":"Reference","previous_headings":"","what":"Matrix to indexed data.frame — matrix_to_idf","title":"Matrix to indexed data.frame — matrix_to_idf","text":"Converts matrix data.frame row () column (j) index variables.","code":""},{"path":"/reference/matrix_to_idf.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Matrix to indexed data.frame — matrix_to_idf","text":"","code":"matrix_to_idf(x, z = \"z\")"},{"path":"/reference/matrix_to_idf.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Matrix to indexed data.frame — matrix_to_idf","text":"x Matrix z Name data.frame column storing matrix values","code":""},{"path":"/reference/matrix_to_idf.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Matrix to indexed data.frame — matrix_to_idf","text":"data.frame","code":""},{"path":"/reference/om.html","id":null,"dir":"Reference","previous_headings":"","what":"Optimise budget — om","title":"Optimise budget — om","text":"Optimise budget","code":""},{"path":"/reference/om.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Optimise budget — om","text":"","code":"om(z, cost, budget, recipients = NULL, sense = \"max\")"},{"path":"/reference/om.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Optimise budget — om","text":"z Matrix impact. Rows[] = units, cols[j] = options, fill = impact measure. units options, fill z NA. cost Matrix cost. Rows[] = units, cols[j] = options, fill = cost. units options, fill cost NA. budget vector budgets recipients Matrix recipients. Rows[] = units, cols[j] = budget levels, fill = binary indicator show Unit[] access budget[j]. sense Optimisation target, can \"min\" \"max\"","code":""},{"path":"/reference/om.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Optimise budget — om","text":"Optimsised solution","code":""},{"path":"/reference/optimise_model.html","id":null,"dir":"Reference","previous_headings":"","what":"Find solution — optimise_model","title":"Find solution — optimise_model","text":"Find solution","code":""},{"path":"/reference/optimise_model.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Find solution — optimise_model","text":"","code":"optimise_model(model)"},{"path":"/reference/optimise_model.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Find solution — optimise_model","text":"model ompr model specified create_model()","code":""},{"path":"/reference/optimise_model.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Find solution — optimise_model","text":"Model solution","code":""},{"path":"/reference/output.html","id":null,"dir":"Reference","previous_headings":"","what":"Wrangle solution output — output","title":"Wrangle solution output — output","text":"Wrangle solution output","code":""},{"path":"/reference/output.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Wrangle solution output — output","text":"","code":"output(solution, z_df, cost_df, budget)"},{"path":"/reference/output.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Wrangle solution output — output","text":"solution Model solution z_df data.frame z cost_df data.frame cost budget vector budgets","code":""},{"path":"/reference/output.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Wrangle solution output — output","text":"Formatted output","code":""},{"path":"/reference/tidyeval.html","id":null,"dir":"Reference","previous_headings":"","what":"Tidy eval helpers — tidyeval","title":"Tidy eval helpers — tidyeval","text":"page lists tidy eval tools reexported package rlang. learn using tidy eval scripts packages high level, see dplyr programming vignette ggplot2 packages vignette. Metaprogramming section Advanced R may also useful deeper dive. tidy eval operators {{, !!, !!! syntactic constructs specially interpreted tidy eval functions. mostly need {{, !! !!! advanced operators use simple cases. curly-curly operator {{ allows tunnel data-variables passed function arguments inside tidy eval functions. {{ designed individual arguments. pass multiple arguments contained dots, use ... normal way. enquo() enquos() delay execution one several function arguments. former returns single expression, latter returns list expressions. defused, expressions longer evaluate . must injected back evaluation context !! (single expression) !!! (list expressions). simple case, code equivalent usage {{ ... . Defusing enquo() enquos() needed complex cases, instance need inspect modify expressions way. .data pronoun object represents current slice data. variable name string, use .data pronoun subset variable [[. Another tidy eval operator :=. makes possible use glue curly-curly syntax LHS =. technical reasons, R language support complex expressions left =, use := workaround. Many tidy eval functions like dplyr::mutate() dplyr::summarise() give automatic name unnamed inputs. need create sort automatic names , use as_label(). instance, glue-tunnelling syntax can reproduced manually : Expressions defused enquo() (tunnelled {{) need simple column names, can arbitrarily complex. as_label() handles cases gracefully. code assumes simple column name, use as_name() instead. safer throws error input name expected.","code":"my_function <- function(data, var, ...) {   data %>%     group_by(...) %>%     summarise(mean = mean({{ var }})) } my_function <- function(data, var, ...) {   # Defuse   var <- enquo(var)   dots <- enquos(...)    # Inject   data %>%     group_by(!!!dots) %>%     summarise(mean = mean(!!var)) } my_var <- \"disp\" mtcars %>% summarise(mean = mean(.data[[my_var]])) my_function <- function(data, var, suffix = \"foo\") {   # Use `{{` to tunnel function arguments and the usual glue   # operator `{` to interpolate plain strings.   data %>%     summarise(\"{{ var }}_mean_{suffix}\" := mean({{ var }})) } my_function <- function(data, var, suffix = \"foo\") {   var <- enquo(var)   prefix <- as_label(var)   data %>%     summarise(\"{prefix}_mean_{suffix}\" := mean(!!var)) }"}]
